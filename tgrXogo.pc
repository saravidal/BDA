/*
 * 
 * Sara Viadal García (sara.vidal@udc.es) - Daniel López López (d.lopez.lopez@udc.es)
 * Universidade da Coruña
 *
 * BDA - Curso 2016-2017
 *
 * TGR - XOGOS
 */

#include<stdlib.h>
#include<stdio.h>
#include<string.h>
EXEC SQL INCLUDE SQLCA;

/*
 * Utilidades para menús e ler valores por teclado. 
 * En "teclado.c" están repetidas con exemplos de uso 
 */
#define MAXLEN 20
void get_string(char *s, int maxlen){
	fgets(s,maxlen,stdin);
	int last = strlen(s) -1;
	if ( (s[last]=='\r') || (s[last]=='\n') )
		s[last] = '\0';
}

void get_password(char *s, int maxlen){
	system("stty -echo");
	get_string(s,maxlen);
	system("stty echo");
}

int get_int(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atoi(s);
}

float get_float(){
	char s[MAXLEN];
	get_string(s,MAXLEN);
	return atof(s);
}

int menu()
{
  int opcion = -1;

  int MAXOPTS = 8; /* Número de opcións do menú */

  printf("Menú da aplicación de Xogos\n");
  printf("==================\n\n"); // - a medio hacer -- hecho
  printf("1. Listar Xogos\n"); //Raik -
  printf("2. Buscar Xogo\n"); //Raik -
  printf("3. Buscar Autor\n"); //Raik -
  printf("4. Engadir Crítica\n"); //Sara
  printf("5. Engadir Autor\n"); //Sara
  printf("6. Engadir Xogo\n"); //Sara
  printf("7. Eliminar Xogo\n"); //Sara
  printf("8. Eliminar Autor\n"); //Sara
  //printf("9. Modificar Crítica\n");
  printf("0. Saír\n");

  while ( (opcion < 0) || (opcion > MAXOPTS)){
      printf("OP> ");
      opcion=get_int();
  }
  return opcion;
}


int errorManager(int salir){
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\nError: %s\n",
      	sqlca.sqlerrm.sqlerrmc);
    
    	if(salir == 1){
       		exit(-1);
	}
	return -1;
}

int errorManager_DML(int salir)
{
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\nError: %s\n",
      	sqlca.sqlerrm.sqlerrmc);
    
	EXEC SQL ROLLBACK;
	
    	if(salir == 1){
       		exit(-1);
	}
	return -1;
}

/* Funcionalidadess de base de datos */

void conecta_bd(){
	int error;
	EXEC SQL WHENEVER SQLERROR DO error = errorManager(1);
   
   EXEC SQL BEGIN DECLARE SECTION;
      char usuario[30];
      
      char clave[30];
   EXEC SQL END DECLARE SECTION;

   printf("Usuario: ");
   get_string(usuario,30);
   printf("Clave: ");
   get_password(clave,30);
  
   printf("\nConectando con Oracle...\n");
   /* Introducir código para conectar coa BD*/
   EXEC SQL CONNECT :usuario IDENTIFIED BY :clave;
   if(!error)
      printf("Conectado!\n");
}

void desconecta_bd(){
	EXEC SQL WHENEVER SQLERROR DO errorManager(1);
   /* Introducir código para desconectar da BD*/
   EXEC SQL COMMIT RELEASE;    
}



void crear_taboa(){
	int error;
	EXEC SQL WHENEVER SQLERROR DO error = errorManager(0);
	
   printf("Función crear_taboa().\n");
   /* Introducir código para crear unha táboa */
	EXEC SQL CREATE TABLE artigo (
	codart NUMBER(4),
	nomart VARCHAR2(20),
	prezoart NUMBER(5,2),
	CONSTRAINT PK_ARTIGO_D PRIMARY KEY(codart)
	);
	if (!error)
		printf("Taboa creada!\n");
}

void eliminar_taboa(){
	int error;
	EXEC SQL WHENEVER SQLERROR DO error = errorManager(0);
	
   printf("Función eliminar_taboa().\n");
   /* Introducir código para eliminar (drop) unha táboa */
   EXEC SQL DROP TABLE artigo;
   if (!error)
      printf("Taboa borrada!\n");
   
}

void insertar_elemento(){
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
   printf("Función insertar_elemento().\n");
   EXEC SQL BEGIN DECLARE SECTION;
      int codart;
      float prezoart;
      char nomart[21];
      short prezoart_ind;
   EXEC SQL END DECLARE SECTION;
   
   printf("Código: ");
   codart=get_int();
   printf("Nome: ");
   get_string(nomart,20);
   printf("Prezo:[-1 si desconocido] ");
   prezoart=get_float();
   
   if (prezoart == -1)
      prezoart_ind = -1;
   else
      prezoart_ind = 0;
   
   EXEC SQL INSERT INTO artigo(codart, nomart, prezoart)
   VALUES (:codart, :nomart, :prezoart:prezoart_ind);
   
	if(erro==0)
		EXEC SQL COMMIT;

}

void borrar_elemento()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función borrar_elemento().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	int codart;
	//int numfilas;
	EXEC SQL END DECLARE SECTION;

	printf("Código a borrar: ");
   	codart=get_int();

	//EXEC SQL SELECT count(*) INTO :numfilas FROM artigo WHERE codart = :codart;

	EXEC SQL DELETE FROM artigo 
		WHERE codart = :codart ;

	//if (numfilas>0)
	if(sqlca.sqlcode == 0)	
		printf("Se ha borrado con exito!\n");
	else
		printf("No existe ese código en la tabla!\n");
	if(erro==0)
		EXEC SQL COMMIT;
}

void borrar_elementoNome()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función borrar_elementoNome().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char nomart[21],patron[23];
	//int numfilas;
	EXEC SQL END DECLARE SECTION;

	
   	printf("Nome a borrar: ");
   	get_string(nomart,20);
	
	strcpy(patron, "%");
	strcpy(patron, nomart);
	strcpy(patron, "%");
	//EXEC SQL SELECT count(*) INTO :numfilas FROM artigo WHERE codart = :codart;

	EXEC SQL DELETE FROM artigo 
		WHERE nomart LIKE :patron ;

	//if (numfilas>0)
	if(sqlca.sqlerrd[2] > 0)	
		printf("Se ha borrado %d artigos con exito!\n", sqlca.sqlerrd[2]);
	else
		printf("No existe ese nombre en la tabla!\n");
	if(erro==0)
		EXEC SQL COMMIT;
}

void buscarCritica() {
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función buscarCriticasXogo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
        char codCritic[26];
		char tituloCritic[51];
        char autor[51]
        int puntuacion;
        time_t data;
        short data_ind;
        char descripcion[501];
        char xogo[51];
	EXEC SQL END DECLARE SECTION;

    printf("Introduzca o código do xogo: ");
   	get_string(codXogo,25);

	//Control de salida

	EXEC SQL SET TRANSACTION READ ONLY;	
	


		EXEC SQL SELECT codCritic, tituloCritic, (SELECT tituloXogo FROM xogo WHERE codXogo=xogo), (SELECT nome FROM autor WHERE idAutor=autor), puntuacion,descripcion,data
			INTO :codCritic,:tituloCritic,:xogo,:autor,:puntuacion,:descripcion,:data:data:_ind;
                FROM critica 
		WHERE autor=:codXogo;

	
	EXEC SQL OPEN cursor_critics;	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	
	if(sqlca.sqlcode == 1403){
		printf("Non hai criticas con ese código.");
	}else{
		printf("--Criticas--\n--Codigo--\t--Titulo--\t--Autor--\t--Puntuacion--\n");
		printf(" %s\t%s\t%s\t%s\t%d\n",codCritic,tituloCritic,xogo,autor,puntuacion);
		printf("-----------------------------------------------------------------\n");
		printf("%s\n",descripcion);
		if(data_ind==0)printf("A fecha: %f",data);
	}
	if(!erro) EXEC SQL COMMIT;
}

void buscarCriticas(int opcion, char id)
{
        int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función buscarCriticasXogo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char identificador[26];
        char codCritic[26];
		char tituloCritic[51];
        char autor[51]
        int puntuacion;
	EXEC SQL END DECLARE SECTION;

        identificador=id;

	EXEC SQL SET TRANSACTION READ ONLY;	
	
	if(opcion==0){
	EXEC SQL DECLARE cursor_critics CURSOR FOR
                SELECT codCritic, tituloCritic, (SELECT nome FROM autor WHERE idAutor=autor), puntuacion 
                FROM critica 
		WHERE xogo=:identificador;

	} else {
		EXEC SQL DECLARE cursor_critics CURSOR FOR
                SELECT codCritic, tituloCritic, (SELECT nome FROM autor WHERE idAutor=autor), puntuacion 
                FROM critica 
		WHERE autor=:identificador;

	}
	EXEC SQL OPEN cursor_critics;	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;
	while(1) {
		EXEC SQL FETCH cursor_critics
		INTO :codCritic,:tituloCritic,:autor,:puntuacion;
		if(sqlca.sqlcode == 1403){
			printf("Non hai criticas para este");
			if(opcion==0)
				printf("xogo.\n");
			else
				printf("autor.\n");
		}else{
			printf("--Criticas--\n--Codigo--\t--Titulo--\t--Autor--\t--Puntuacion--\n");
			printf(" %s\t%s\t%s\t%d\n",codCritic,tituloCritic,autor,puntuacion);
		}
	}
        if(!erro) EXEC SQL COMMIT;
        
        buscarCritica();       
}

void buscarXogoCodigo()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función buscarXogoCodigo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char codXogo[26];
	char tituloXogo[51];
	time_t dataDeSaida;
	short dataDeSaida_ind;
        int votosPositivos;
        int votosNegativos;
        int notaMedia;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SET TRANSACTION READ ONLY;	

	printf("Introduzca o código do xogo: ");
   	get_string(codXogo,25);

	//Control de salida

	EXEC SQL SELECT codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,(SELECT AVG(puntuacion) FROM criticas WHERE xogo=codXogo) 
		INTO :codXogo,:tituloXogo,:dataDeSaida:dataDeSaida_ind,:votosPositivos,:votosNegativos,:notaMedia;
                FROM xogo 
		WHERE codXogo=:codXogo;

	

	if(sqlca.sqlcode == 1403)	
		printf("No se encontró el código indicado.\n");
	else
                printf("--Xogos--\n--Codigo--\t--Titulo--\t--Data de saida--\t--Votos Positivos--\t--Votos Negativos--\t--Nota Media--\n");
                if(dataDeSaida_ind == 0)
                        printf(" %s\t%s\t%f\t%d\t%d\t%d\n",codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,notaMedia);
                else
                        printf(" %d\t%s\tSen data\t%d\t%d\t%d\n",codXogo,tituloXogo,votosPositivos,votosNegativos,notaMedia);	
        if(!erro) EXEC SQL COMMIT;
        
        buscarCriticas(0,codXogo);

}

void buscarXogoTitulo()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función buscarXogoCodigo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char codXogo[26];
		char tituloXogo[51];
		time_t dataDeSaida;
		short dataDeSaida_ind;
        int votosPositivos;
        int votosNegativos;
        int notaMedia;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SET TRANSACTION READ ONLY;	

	printf("Introduzca o titulo do xogo: ");
   	get_string(codXogo,25);

	EXEC SQL SELECT codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,(SELECT AVG(puntuacion) FROM criticas WHERE xogo=codXogo) 
		INTO :codXogo,:tituloXogo,:dataDeSaida:dataDeSaida_ind,:votosPositivos,:votosNegativos,:notaMedia;
                FROM xogo 
		WHERE tituloXogo=:tituloXogo;

	

	if(sqlca.sqlcode == 1403)	
		printf("No se encontró el titulo indicado.\n");
	else
                printf("--Xogos--\n--Codigo--\t--Titulo--\t--Data de saida--\t--Votos Positivos--\t--Votos Negativos--\t--Nota Media--\n");
                if(dataDeSaida_ind == 0)
                        printf(" %s\t%s\t%f\t%d\t%d\t%d\n",codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,notaMedia);
                else
                        printf(" %d\t%s\tSen data\t%d\t%d\t%d\n",codXogo,tituloXogo,votosPositivos,votosNegativos,notaMedia);	
        if(!erro) EXEC SQL COMMIT;
        
        buscarCriticasXogo(codXogo);

}

void buscarAutor()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función buscarXogoCodigo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char idAutor[26];
		char nome[51];
		char enlace[257];
		short enlace_ind;
        char tipo[31];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SET TRANSACTION READ ONLY;	

	printf("Introduzca o titulo do xogo: ");
   	get_string(codXogo,25);

	EXEC SQL SELECT codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,(SELECT AVG(puntuacion) FROM criticas WHERE xogo=codXogo) 
		INTO :codXogo,:tituloXogo,:dataDeSaida:dataDeSaida_ind,:votosPositivos,:votosNegativos,:notaMedia;
                FROM xogo 
		WHERE tituloXogo=:tituloXogo;

	

	if(sqlca.sqlcode == 1403)	
		printf("No se encontró el titulo indicado.\n");
	else
                printf("--Xogos--\n--Codigo--\t--Titulo--\t--Data de saida--\t--Votos Positivos--\t--Votos Negativos--\t--Nota Media--\n");
                if(dataDeSaida_ind == 0)
                        printf(" %s\t%s\t%f\t%d\t%d\t%d\n",codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,notaMedia);
                else
                        printf(" %d\t%s\tSen data\t%d\t%d\t%d\n",codXogo,tituloXogo,votosPositivos,votosNegativos,notaMedia);	
        if(!erro) EXEC SQL COMMIT;
        
        buscarCriticas(1,idAutor);

}


void listarXogos()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función listarXogos().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	char codXogo[26];
	char tituloXogo[51];
	time_t dataDeSaida;
	short dataDeSaida_ind;
        int votosPositivos;
        int votosNegativos;
        int notaMedia;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SET TRANSACTION READ ONLY;	

	EXEC SQL DECLARE cursor_elementos CURSOR FOR
		SELECT codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,(SELECT AVG(puntuacion) FROM criticas WHERE xogo=codXogo) 
		FROM xogo;
	
	EXEC SQL OPEN cursor_elementos;	
	EXEC SQL WHENEVER NOT FOUND DO BREAK;

	while(1) {
		EXEC SQL FETCH cursor_elementos
		INTO :codXogo,:tituloXogo,:dataDeSaida:dataDeSaida_ind,:votosPositivos,:votosNegativos,:notaMedia;
		if(sqlca.sqlcode == 1403)	
			printf("Non hai xogos.\n");
		else
                        printf("--Xogos--\n--Codigo--\t--Titulo--\t--Data de saida--\t--Votos Positivos--\t--Votos Negativos--\t--Nota Media--\n");
			if(dataDeSaida_ind == 0)
				printf(" %s\t%s\t%f\t%d\t%d\t%d\n",codXogo,tituloXogo,dataDeSaida,votosPositivos,votosNegativos,notaMedia);
			else
				printf(" %d\t%s\tSen data\t%d\t%d\t%d\n",codXogo,tituloXogo,votosPositivos,votosNegativos,notaMedia);
	}
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	printf("Xogos atopados: %d.\n", sqlca.sqlerrd[2]);
	EXEC SQL CLOSE cursor_elementos;

	if(!erro) EXEC SQL COMMIT;
	
	buscarXogoCodigo();

}

void incrementoPrezo()
{
	int erro = 0;		
	EXEC SQL WHENEVER SQLERROR DO erro=errorManager_DML(0);
	
	printf("Función incrementoPrezo().\n");
   	EXEC SQL BEGIN DECLARE SECTION;
      	int codart;
	float porcentaje;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

	printf("Código: ");
   	codart=get_int();
	printf("Porcentaje: ");
   	porcentaje=get_float();

	EXEC SQL UPDATE artigo
		SET prezoart = prezoart * (1+ :porcentaje/100)
		WHERE codart = :codart;

	printf("PAUSA"); codart=get_int();

	if(!erro) EXEC SQL COMMIT;
	
}
/* Función principal */
int main()
{
  conecta_bd();

  int op;

  while ( (op=menu()) != 0){
       switch(op){
            case 1: listarXogos(); break;
            case 2: buscarXogoTitulo(); break;
            case 3: buscarAutor(); break;
	    case 4: borrar_elemento(); break;
	    case 5: borrar_elementoNome(); break;
	    case 6: buscarElementoCodigo(); break;
	    case 7: break;
	    case 8: incrementoPrezo(); break;
       }

  }
 


 desconecta_bd(); 

 return 0;
}



